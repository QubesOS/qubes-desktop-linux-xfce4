diff -ur xfwm4-4.12.3/src/client.c xfwm4-4.12.3/src/client.c
--- xfwm4-4.12.3/src/client.c	2015-05-17 04:41:45.000000000 +1200
+++ xfwm4-4.12.3/src/client.c	2016-03-12 23:53:08.277000000 +1300
@@ -165,6 +165,88 @@
     }
 }
 
+void
+getQubesLabel (Client *c)
+{
+    ScreenInfo *screen_info;
+    DisplayInfo *display_info;
+    Atom atom_label;
+
+    screen_info = c->screen_info;
+    display_info = screen_info->display_info;
+
+    atom_label = XInternAtom(display_info->dpy, "_QUBES_LABEL", TRUE);
+
+    if (atom_label == 0) {
+        c->qubes_label = QUBES_LABEL_DOM0;
+    } else {
+        Atom actual_type;
+        int actual_format;
+        unsigned long nitems = 0, bytes_left;
+        char *data = 0;
+
+        if ((XGetWindowProperty (display_info->dpy, c->window, atom_label, 0L, 1L,
+                        FALSE, AnyPropertyType, &actual_type, &actual_format, &nitems,
+                        &bytes_left, (unsigned char **) &data) == Success))
+        {
+            if (nitems != 1) {
+                // ERROR? Only Dom0 Windows don't have this property set...
+                c->qubes_label = QUBES_LABEL_DOM0;
+            } else {
+                c->qubes_label = (int)*data;
+            }
+        } else {
+            c->qubes_label = QUBES_LABEL_DOM0;
+        }
+    }
+}
+
+void
+getQubesVmName (Client *c)
+{
+    ScreenInfo *screen_info;
+    DisplayInfo *display_info;
+    gchar *qubes_vmname;
+    Atom atom_vmname;
+
+    screen_info = c->screen_info;
+    display_info = screen_info->display_info;
+
+    if (c->qubes_vmname)
+        return;
+
+    atom_vmname = XInternAtom(display_info->dpy, "_QUBES_VMNAME", TRUE);
+
+    if (atom_vmname == 0) {
+        c->qubes_vmname = g_strdup("[Dom0] ");
+    } else {
+        Atom actual_type;
+        int actual_format;
+        unsigned long nitems = 0, bytes_left;
+        char *data = 0;
+
+        if ((XGetWindowProperty (display_info->dpy, c->window, atom_vmname, 0L, 0L,
+                        FALSE, AnyPropertyType, &actual_type, &actual_format, &nitems,
+                        &bytes_left, (unsigned char **) &data) == Success))
+        {
+            if (bytes_left > 0) {
+                if ((XGetWindowProperty (display_info->dpy, c->window, atom_vmname, 0L, bytes_left,
+                                FALSE, AnyPropertyType, &actual_type, &actual_format, &nitems,
+                                &bytes_left, (unsigned char **) &data) == Success))
+                {
+                    c->qubes_vmname = g_strdup_printf (_("[%s] "), data);
+                } else {
+                    c->qubes_vmname = g_strdup (_("[ERROR Reading VM name?!] "));
+                }
+            } else {
+                c->qubes_vmname = g_strdup("[Dom0] ");
+            }
+        } else {
+            c->qubes_vmname = g_strdup("[Dom0] ");
+        }
+    }
+}
+
 static gchar*
 clientCreateTitleName (Client *c, gchar *name, gchar *hostname)
 {
@@ -178,14 +260,16 @@
     screen_info = c->screen_info;
     display_info = screen_info->display_info;
 
+    getQubesVmName (c);
+
     if (strlen (hostname) && (display_info->hostname) && (g_ascii_strcasecmp (display_info->hostname, hostname)))
     {
         /* TRANSLATORS: "(on %s)" is like "running on" the name of the other host */
-        title = g_strdup_printf (_("%s (on %s)"), name, hostname);
+        title = g_strdup_printf (_("%s%s (on %s)"), c->qubes_vmname, name, hostname);
     }
     else
     {
-        title = g_strdup (name);
+        title = g_strdup_printf ("%s%s", c->qubes_vmname, name);
     }
 
     return title;
@@ -1332,6 +1416,10 @@
     {
         g_free (c->hostname);
     }
+    if (c->qubes_vmname)
+    {
+        g_free (c->qubes_vmname);
+    }
     if (c->size)
     {
         XFree (c->size);
@@ -1456,7 +1544,7 @@
         xfwmPixmapFree (&c->appmenu[i]);
     }
 
-    if (xfwmPixmapNone(&screen_info->buttons[MENU_BUTTON][ACTIVE]))
+    if (xfwmPixmapNone(&screen_info->buttons[c->qubes_label][MENU_BUTTON][ACTIVE]))
     {
         /* The current theme has no menu button */
         return;
@@ -1464,13 +1552,13 @@
 
     for (i = 0; i < STATE_TOGGLED; i++)
     {
-        if (!xfwmPixmapNone(&screen_info->buttons[MENU_BUTTON][i]))
+        if (!xfwmPixmapNone(&screen_info->buttons[c->qubes_label][MENU_BUTTON][i]))
         {
-            xfwmPixmapDuplicate (&screen_info->buttons[MENU_BUTTON][i], &c->appmenu[i]);
+            xfwmPixmapDuplicate (&screen_info->buttons[c->qubes_label][MENU_BUTTON][i], &c->appmenu[i]);
         }
     }
-    size = MIN (screen_info->buttons[MENU_BUTTON][ACTIVE].width,
-                screen_info->buttons[MENU_BUTTON][ACTIVE].height);
+    size = MIN (screen_info->buttons[c->qubes_label][MENU_BUTTON][ACTIVE].width,
+                screen_info->buttons[c->qubes_label][MENU_BUTTON][ACTIVE].height);
 
     if (size > 1)
     {
@@ -1647,6 +1735,11 @@
     getTransientFor (display_info, screen_info->xroot, c->window, &c->transient_for);
     XChangeSaveSet(display_info->dpy, c->window, SetModeInsert);
 
+    /* Qubes window decoration */
+    getQubesLabel(c);
+    getQubesVmName(c);
+    clientUpdateName(c);
+
     /* Initialize structure */
     c->size = NULL;
     c->flags = 0L;
@@ -3942,32 +4038,32 @@
             break;
         case SHADE_BUTTON:
             if (FLAG_TEST (c->flags, CLIENT_FLAG_SHADED)
-                && (!xfwmPixmapNone(&screen_info->buttons[SHADE_BUTTON][state + STATE_TOGGLED])))
+                && (!xfwmPixmapNone(&screen_info->buttons[c->qubes_label][SHADE_BUTTON][state + STATE_TOGGLED])))
             {
-                return &screen_info->buttons[SHADE_BUTTON][state + STATE_TOGGLED];
+                return &screen_info->buttons[c->qubes_label][SHADE_BUTTON][state + STATE_TOGGLED];
             }
-            return &screen_info->buttons[SHADE_BUTTON][state];
+            return &screen_info->buttons[c->qubes_label][SHADE_BUTTON][state];
             break;
         case STICK_BUTTON:
             if (FLAG_TEST (c->flags, CLIENT_FLAG_STICKY)
-                && (!xfwmPixmapNone(&screen_info->buttons[STICK_BUTTON][state + STATE_TOGGLED])))
+                && (!xfwmPixmapNone(&screen_info->buttons[c->qubes_label][STICK_BUTTON][state + STATE_TOGGLED])))
             {
-                return &screen_info->buttons[STICK_BUTTON][state + STATE_TOGGLED];
+                return &screen_info->buttons[c->qubes_label][STICK_BUTTON][state + STATE_TOGGLED];
             }
-            return &screen_info->buttons[STICK_BUTTON][state];
+            return &screen_info->buttons[c->qubes_label][STICK_BUTTON][state];
             break;
         case MAXIMIZE_BUTTON:
             if (FLAG_TEST (c->flags, CLIENT_FLAG_MAXIMIZED)
-                && (!xfwmPixmapNone(&screen_info->buttons[MAXIMIZE_BUTTON][state + STATE_TOGGLED])))
+                && (!xfwmPixmapNone(&screen_info->buttons[c->qubes_label][MAXIMIZE_BUTTON][state + STATE_TOGGLED])))
             {
-                return &screen_info->buttons[MAXIMIZE_BUTTON][state + STATE_TOGGLED];
+                return &screen_info->buttons[c->qubes_label][MAXIMIZE_BUTTON][state + STATE_TOGGLED];
             }
-            return &screen_info->buttons[MAXIMIZE_BUTTON][state];
+            return &screen_info->buttons[c->qubes_label][MAXIMIZE_BUTTON][state];
             break;
         default:
             break;
     }
-    return &screen_info->buttons[button][state];
+    return &screen_info->buttons[c->qubes_label][button][state];
 }
 
 int
diff -ur xfwm4-4.12.3/src/client.h xfwm4-4.12.3/src/client.h
--- xfwm4-4.12.3/src/client.h	2015-05-16 00:25:56.000000000 +1200
+++ xfwm4-4.12.3/src/client.h	2016-03-12 23:53:08.276000000 +1300
@@ -327,6 +327,8 @@
     gint struts[STRUTS_SIZE];
     gchar *hostname;
     gchar *name;
+    gchar *qubes_vmname;
+    int qubes_label;
     guint32 user_time;
     GPid pid;
     guint32 ping_time;
diff -ur xfwm4-4.12.3/src/frame.c xfwm4-4.12.3/src/frame.c
--- xfwm4-4.12.3/src/frame.c	2015-05-16 00:25:56.000000000 +1200
+++ xfwm4-4.12.3/src/frame.c	2016-03-12 23:53:08.277000000 +1300
@@ -51,7 +51,7 @@
     TRACE ("entering frameDecorationLeft");
 
     g_return_val_if_fail (screen_info != NULL, 0);
-    return screen_info->sides[SIDE_LEFT][ACTIVE].width;
+    return screen_info->sides[QUBES_LABEL_DOM0][SIDE_LEFT][ACTIVE].width;
 }
 
 int
@@ -60,7 +60,7 @@
     TRACE ("entering frameDecorationRight");
 
     g_return_val_if_fail (screen_info != NULL, 0);
-    return screen_info->sides[SIDE_RIGHT][ACTIVE].width;
+    return screen_info->sides[QUBES_LABEL_DOM0][SIDE_RIGHT][ACTIVE].width;
 }
 
 int
@@ -69,7 +69,7 @@
     TRACE ("entering frameDecorationTop");
 
     g_return_val_if_fail (screen_info != NULL, 0);
-    return screen_info->title[TITLE_3][ACTIVE].height;
+    return screen_info->title[QUBES_LABEL_DOM0][TITLE_3][ACTIVE].height;
 }
 
 int
@@ -78,7 +78,7 @@
     TRACE ("entering frameDecorationBottom");
 
     g_return_val_if_fail (screen_info != NULL, 0);
-    return screen_info->sides[SIDE_BOTTOM][ACTIVE].height;
+    return screen_info->sides[QUBES_LABEL_DOM0][SIDE_BOTTOM][ACTIVE].height;
 }
 
 int
@@ -92,7 +92,7 @@
         && (!FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
             || !(c->screen_info->params->borderless_maximize)))
     {
-        return c->screen_info->sides[SIDE_LEFT][ACTIVE].width;
+        return c->screen_info->sides[QUBES_LABEL_DOM0][SIDE_LEFT][ACTIVE].width;
     }
     return 0;
 }
@@ -108,7 +108,7 @@
         && (!FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
             || !(c->screen_info->params->borderless_maximize)))
     {
-        return c->screen_info->sides[SIDE_RIGHT][ACTIVE].width;
+        return c->screen_info->sides[QUBES_LABEL_DOM0][SIDE_RIGHT][ACTIVE].width;
     }
     return 0;
 }
@@ -121,7 +121,7 @@
     g_return_val_if_fail (c != NULL, 0);
     if (CLIENT_HAS_FRAME (c))
     {
-        return c->screen_info->title[TITLE_3][ACTIVE].height;
+        return c->screen_info->title[QUBES_LABEL_DOM0][TITLE_3][ACTIVE].height;
     }
     return 0;
 }
@@ -137,7 +137,7 @@
         && (!FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
             || !(c->screen_info->params->borderless_maximize)))
     {
-        return c->screen_info->sides[SIDE_BOTTOM][ACTIVE].height;
+        return c->screen_info->sides[QUBES_LABEL_DOM0][SIDE_BOTTOM][ACTIVE].height;
     }
     return 0;
 }
@@ -325,7 +325,7 @@
     {
         return 0;
     }
-    return c->screen_info->corners[CORNER_TOP_LEFT][state].width;
+    return c->screen_info->corners[QUBES_LABEL_DOM0][CORNER_TOP_LEFT][state].width;
 
 }
 
@@ -340,7 +340,7 @@
     {
         return 0;
     }
-    return c->screen_info->corners[CORNER_TOP_RIGHT][state].width;
+    return c->screen_info->corners[QUBES_LABEL_DOM0][CORNER_TOP_RIGHT][state].width;
 }
 
 static int
@@ -370,15 +370,15 @@
 
     screen_info = c->screen_info;
 
-    if (!xfwmPixmapNone(&screen_info->top[part][state]))
+    if (!xfwmPixmapNone(&screen_info->top[c->qubes_label][part][state]))
     {
-        xfwmPixmapFill (&screen_info->top[part][state], top_pm, x, 0, w, h);
+        xfwmPixmapFill (&screen_info->top[c->qubes_label][part][state], top_pm, x, 0, w, h);
     }
     else
     {
-        xfwmPixmapFill (&screen_info->title[part][state], top_pm, x, 0, w, h);
+        xfwmPixmapFill (&screen_info->title[c->qubes_label][part][state], top_pm, x, 0, w, h);
     }
-    xfwmPixmapFill (&screen_info->title[part][state], title_pm, x, 0, w, frameTop (c));
+    xfwmPixmapFill (&screen_info->title[c->qubes_label][part][state], title_pm, x, 0, w, frameTop (c));
 }
 
 static void
@@ -461,9 +461,9 @@
         title_y = MAX (0, frameTop (c) - title_height);
     }
 
-    if (!xfwmPixmapNone(&screen_info->top[3][ACTIVE]))
+    if (!xfwmPixmapNone(&screen_info->top[c->qubes_label][3][ACTIVE]))
     {
-        top_height = screen_info->top[3][ACTIVE].height;
+        top_height = screen_info->top[c->qubes_label][3][ACTIVE].height;
     }
     else
     {
@@ -475,8 +475,8 @@
     }
 
     w1 = 0;
-    w2 = screen_info->title[TITLE_2][state].width;
-    w4 = screen_info->title[TITLE_4][state].width;
+    w2 = screen_info->title[c->qubes_label][TITLE_2][state].width;
+    w4 = screen_info->title[c->qubes_label][TITLE_4][state].width;
 
     if (screen_info->params->full_width_title)
     {
@@ -776,25 +776,25 @@
         if (xfwmWindowVisible (&c->corners[CORNER_BOTTOM_LEFT]))
         {
             XShapeCombineMask (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_BOTTOM_LEFT]),
-                               ShapeBounding, 0, 0, screen_info->corners[CORNER_BOTTOM_LEFT][state].mask, ShapeSet);
+                               ShapeBounding, 0, 0, screen_info->corners[c->qubes_label][CORNER_BOTTOM_LEFT][state].mask, ShapeSet);
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_BOTTOM_RIGHT]))
         {
             XShapeCombineMask (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_BOTTOM_RIGHT]),
-                               ShapeBounding, 0, 0, screen_info->corners[CORNER_BOTTOM_RIGHT][state].mask, ShapeSet);
+                               ShapeBounding, 0, 0, screen_info->corners[c->qubes_label][CORNER_BOTTOM_RIGHT][state].mask, ShapeSet);
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_TOP_LEFT]))
         {
             XShapeCombineMask (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_TOP_LEFT]),
-                               ShapeBounding, 0, 0, screen_info->corners[CORNER_TOP_LEFT][state].mask, ShapeSet);
+                               ShapeBounding, 0, 0, screen_info->corners[c->qubes_label][CORNER_TOP_LEFT][state].mask, ShapeSet);
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_TOP_RIGHT]))
         {
             XShapeCombineMask (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_TOP_RIGHT]),
-                               ShapeBounding, 0, 0, screen_info->corners[CORNER_TOP_RIGHT][state].mask, ShapeSet);
+                               ShapeBounding, 0, 0, screen_info->corners[c->qubes_label][CORNER_TOP_RIGHT][state].mask, ShapeSet);
         }
 
         for (i = 0; i < BUTTON_COUNT; i++)
@@ -808,48 +808,48 @@
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_TOP_LEFT]) &&
-            (screen_info->corners[CORNER_TOP_LEFT][state].height > frameHeight (c) - frameBottom (c) + 1))
+            (screen_info->corners[c->qubes_label][CORNER_TOP_LEFT][state].height > frameHeight (c) - frameBottom (c) + 1))
         {
             rect.x      = 0;
             rect.y      = frameHeight (c) - frameBottom (c) + 1;
             rect.width  = frameTopLeftWidth (c, state);
-            rect.height = screen_info->corners[CORNER_TOP_LEFT][state].height
+            rect.height = screen_info->corners[c->qubes_label][CORNER_TOP_LEFT][state].height
                            - (frameHeight (c) - frameBottom (c) + 1);
             XShapeCombineRectangles (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_TOP_LEFT]),
                                      ShapeBounding, 0, 0, &rect, 1, ShapeSubtract, 0);
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_TOP_RIGHT]) &&
-            (screen_info->corners[CORNER_TOP_RIGHT][state].height > frameHeight (c) - frameBottom (c) + 1))
+            (screen_info->corners[c->qubes_label][CORNER_TOP_RIGHT][state].height > frameHeight (c) - frameBottom (c) + 1))
         {
             rect.x      = 0;
             rect.y      = frameHeight (c) - frameBottom (c) + 1;
             rect.width  = frameTopRightWidth (c, state);
-            rect.height = screen_info->corners[CORNER_TOP_RIGHT][state].height
+            rect.height = screen_info->corners[c->qubes_label][CORNER_TOP_RIGHT][state].height
                            - (frameHeight (c) - frameBottom (c) + 1);
             XShapeCombineRectangles (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_TOP_RIGHT]),
                                      ShapeBounding, 0, 0, &rect, 1, ShapeSubtract, 0);
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_BOTTOM_LEFT]) &&
-            (screen_info->corners[CORNER_BOTTOM_LEFT][state].height > frameHeight (c) - frameTop (c) + 1))
+            (screen_info->corners[c->qubes_label][CORNER_BOTTOM_LEFT][state].height > frameHeight (c) - frameTop (c) + 1))
         {
             rect.x      = 0;
             rect.y      = 0;
-            rect.width  = screen_info->corners[CORNER_BOTTOM_LEFT][state].width;
-            rect.height = screen_info->corners[CORNER_BOTTOM_LEFT][state].height
+            rect.width  = screen_info->corners[c->qubes_label][CORNER_BOTTOM_LEFT][state].width;
+            rect.height = screen_info->corners[c->qubes_label][CORNER_BOTTOM_LEFT][state].height
                            - (frameHeight (c) - frameTop (c) + 1);
             XShapeCombineRectangles (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_BOTTOM_LEFT]),
                                      ShapeBounding, 0, 0, &rect, 1, ShapeSubtract, 0);
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_BOTTOM_RIGHT]) &&
-            (screen_info->corners[CORNER_BOTTOM_RIGHT][state].height > frameHeight (c) - frameTop (c) + 1))
+            (screen_info->corners[c->qubes_label][CORNER_BOTTOM_RIGHT][state].height > frameHeight (c) - frameTop (c) + 1))
         {
             rect.x      = 0;
             rect.y      = 0;
-            rect.width  = screen_info->corners[CORNER_BOTTOM_RIGHT][state].width;
-            rect.height = screen_info->corners[CORNER_BOTTOM_RIGHT][state].height
+            rect.width  = screen_info->corners[c->qubes_label][CORNER_BOTTOM_RIGHT][state].width;
+            rect.height = screen_info->corners[c->qubes_label][CORNER_BOTTOM_RIGHT][state].height
                            - (frameHeight (c) - frameTop (c) + 1);
             XShapeCombineRectangles (display_info->dpy, MYWINDOW_XWINDOW (c->corners[CORNER_BOTTOM_RIGHT]),
                                      ShapeBounding, 0, 0, &rect, 1, ShapeSubtract, 0);
@@ -887,7 +887,7 @@
         if (xfwmWindowVisible (&c->sides[SIDE_BOTTOM]))
         {
             XShapeCombineShape (display_info->dpy, screen_info->shape_win, ShapeBounding,
-                                screen_info->corners[CORNER_BOTTOM_LEFT][state].width,
+                                screen_info->corners[c->qubes_label][CORNER_BOTTOM_LEFT][state].width,
                                 frameHeight (c) - frameBottom (c),
                                 MYWINDOW_XWINDOW (c->sides[SIDE_BOTTOM]), ShapeBounding, ShapeUnion);
         }
@@ -895,7 +895,7 @@
         if (xfwmWindowVisible (&c->sides[SIDE_TOP]))
         {
             XShapeCombineShape (display_info->dpy, screen_info->shape_win, ShapeBounding,
-                                screen_info->corners[CORNER_BOTTOM_LEFT][state].width,
+                                screen_info->corners[c->qubes_label][CORNER_BOTTOM_LEFT][state].width,
                                 frameTop (c) - frameBottom (c),
                                 MYWINDOW_XWINDOW (c->sides[SIDE_TOP]), ShapeBounding, ShapeUnion);
         }
@@ -903,15 +903,15 @@
         if (xfwmWindowVisible (&c->corners[CORNER_BOTTOM_LEFT]))
         {
             XShapeCombineShape (display_info->dpy, screen_info->shape_win, ShapeBounding, 0,
-                                frameHeight (c) - screen_info->corners[CORNER_BOTTOM_LEFT][state].height,
+                                frameHeight (c) - screen_info->corners[c->qubes_label][CORNER_BOTTOM_LEFT][state].height,
                                 MYWINDOW_XWINDOW (c->corners[CORNER_BOTTOM_LEFT]), ShapeBounding, ShapeUnion);
         }
 
         if (xfwmWindowVisible (&c->corners[CORNER_BOTTOM_RIGHT]))
         {
             XShapeCombineShape (display_info->dpy, screen_info->shape_win, ShapeBounding,
-                                frameWidth (c) - screen_info->corners[CORNER_BOTTOM_RIGHT][state].width,
-                                frameHeight (c) - screen_info->corners[CORNER_BOTTOM_RIGHT][state].height,
+                                frameWidth (c) - screen_info->corners[c->qubes_label][CORNER_BOTTOM_RIGHT][state].width,
+                                frameHeight (c) - screen_info->corners[c->qubes_label][CORNER_BOTTOM_RIGHT][state].height,
                                 MYWINDOW_XWINDOW (c->corners[CORNER_BOTTOM_RIGHT]), ShapeBounding, ShapeUnion);
         }
 
@@ -927,7 +927,7 @@
             if (xfwmWindowVisible (&c->buttons[i]))
             {
                 XShapeCombineShape (display_info->dpy, screen_info->shape_win, ShapeBounding, button_x[i],
-                                    (frameTop (c) - screen_info->buttons[i][state].height + 1) / 2,
+                                    (frameTop (c) - screen_info->buttons[c->qubes_label][i][state].height + 1) / 2,
                                     MYWINDOW_XWINDOW (c->buttons[i]), ShapeBounding, ShapeUnion);
             }
         }
@@ -1086,7 +1086,7 @@
             }
             else if (button >= 0)
             {
-                if (x + screen_info->buttons[button][state].width + screen_info->params->button_spacing < right)
+                if (x + screen_info->buttons[c->qubes_label][button][state].width + screen_info->params->button_spacing < right)
                 {
                     my_pixmap = clientGetButtonPixmap (c, button, clientGetButtonState (c, button, state));
                     if (!xfwmPixmapNone(my_pixmap))
@@ -1094,11 +1094,11 @@
                         xfwmWindowSetBG (&c->buttons[button], my_pixmap);
                     }
                     xfwmWindowShow (&c->buttons[button], x,
-                        (frameTop (c) - screen_info->buttons[button][state].height + 1) / 2,
-                        screen_info->buttons[button][state].width,
-                        screen_info->buttons[button][state].height, TRUE);
+                        (frameTop (c) - screen_info->buttons[c->qubes_label][button][state].height + 1) / 2,
+                        screen_info->buttons[c->qubes_label][button][state].width,
+                        screen_info->buttons[c->qubes_label][button][state].height, TRUE);
                     button_x[button] = x;
-                    x = x + screen_info->buttons[button][state].width +
+                    x = x + screen_info->buttons[c->qubes_label][button][state].width +
                         screen_info->params->button_spacing;
                 }
                 else
@@ -1121,19 +1121,19 @@
             }
             else if (button >= 0)
             {
-                if (x - screen_info->buttons[button][state].width - screen_info->params->button_spacing > left)
+                if (x - screen_info->buttons[c->qubes_label][button][state].width - screen_info->params->button_spacing > left)
                 {
                     my_pixmap = clientGetButtonPixmap (c, button, clientGetButtonState (c, button, state));
                     if (!xfwmPixmapNone(my_pixmap))
                     {
                         xfwmWindowSetBG (&c->buttons[button], my_pixmap);
                     }
-                    x = x - screen_info->buttons[button][state].width -
+                    x = x - screen_info->buttons[c->qubes_label][button][state].width -
                         screen_info->params->button_spacing;
                     xfwmWindowShow (&c->buttons[button], x,
-                        (frameTop (c) - screen_info->buttons[button][state].height + 1) / 2,
-                        screen_info->buttons[button][state].width,
-                        screen_info->buttons[button][state].height, TRUE);
+                        (frameTop (c) - screen_info->buttons[c->qubes_label][button][state].height + 1) / 2,
+                        screen_info->buttons[c->qubes_label][button][state].width,
+                        screen_info->buttons[c->qubes_label][button][state].height, TRUE);
                     button_x[button] = x;
                 }
                 else
@@ -1147,12 +1147,12 @@
 
         top_width = frameWidth (c) - frameTopLeftWidth (c, state) - frameTopRightWidth (c, state);
         bottom_width = frameWidth (c) -
-            screen_info->corners[CORNER_BOTTOM_LEFT][state].width -
-            screen_info->corners[CORNER_BOTTOM_RIGHT][state].width;
+            screen_info->corners[c->qubes_label][CORNER_BOTTOM_LEFT][state].width -
+            screen_info->corners[c->qubes_label][CORNER_BOTTOM_RIGHT][state].width;
         left_height = frameHeight (c) - frameTop (c) -
-            screen_info->corners[CORNER_BOTTOM_LEFT][state].height;
+            screen_info->corners[c->qubes_label][CORNER_BOTTOM_LEFT][state].height;
         right_height = frameHeight (c) - frameTop (c) -
-            screen_info->corners[CORNER_BOTTOM_RIGHT][state].height;
+            screen_info->corners[c->qubes_label][CORNER_BOTTOM_RIGHT][state].height;
 
         xfwmPixmapInit (screen_info, &frame_pix.pm_title);
         xfwmPixmapInit (screen_info, &frame_pix.pm_sides[SIDE_TOP]);
@@ -1171,13 +1171,13 @@
         if (requires_clearing)
         {
             xfwmWindowSetBG (&c->corners[CORNER_TOP_LEFT],
-                &screen_info->corners[CORNER_TOP_LEFT][state]);
+                &screen_info->corners[c->qubes_label][CORNER_TOP_LEFT][state]);
             xfwmWindowSetBG (&c->corners[CORNER_TOP_RIGHT],
-                &screen_info->corners[CORNER_TOP_RIGHT][state]);
+                &screen_info->corners[c->qubes_label][CORNER_TOP_RIGHT][state]);
             xfwmWindowSetBG (&c->corners[CORNER_BOTTOM_LEFT],
-                &screen_info->corners[CORNER_BOTTOM_LEFT][state]);
+                &screen_info->corners[c->qubes_label][CORNER_BOTTOM_LEFT][state]);
             xfwmWindowSetBG (&c->corners[CORNER_BOTTOM_RIGHT],
-                &screen_info->corners[CORNER_BOTTOM_RIGHT][state]);
+                &screen_info->corners[c->qubes_label][CORNER_BOTTOM_RIGHT][state]);
         }
 
         if (FLAG_TEST_ALL (c->flags, CLIENT_FLAG_MAXIMIZED)
@@ -1203,7 +1203,7 @@
             {
                 xfwmPixmapCreate (screen_info, &frame_pix.pm_sides[SIDE_LEFT],
                     frameLeft (c), left_height);
-                xfwmPixmapFill (&screen_info->sides[SIDE_LEFT][state],
+                xfwmPixmapFill (&screen_info->sides[c->qubes_label][SIDE_LEFT][state],
                     &frame_pix.pm_sides[SIDE_LEFT],
                     0, 0, frameLeft (c), left_height);
                 xfwmWindowSetBG (&c->sides[SIDE_LEFT],
@@ -1213,7 +1213,7 @@
 
                 xfwmPixmapCreate (screen_info, &frame_pix.pm_sides[SIDE_RIGHT],
                     frameRight (c), right_height);
-                xfwmPixmapFill (&screen_info->sides[SIDE_RIGHT][state],
+                xfwmPixmapFill (&screen_info->sides[c->qubes_label][SIDE_RIGHT][state],
                     &frame_pix.pm_sides[SIDE_RIGHT],
                     0, 0, frameRight (c), right_height);
                 xfwmWindowSetBG (&c->sides[SIDE_RIGHT],
@@ -1225,13 +1225,13 @@
 
             xfwmPixmapCreate (screen_info, &frame_pix.pm_sides[SIDE_BOTTOM],
                 bottom_width, frameBottom (c));
-            xfwmPixmapFill (&screen_info->sides[SIDE_BOTTOM][state],
+            xfwmPixmapFill (&screen_info->sides[c->qubes_label][SIDE_BOTTOM][state],
                 &frame_pix.pm_sides[SIDE_BOTTOM],
                 0, 0, bottom_width, frameBottom (c));
             xfwmWindowSetBG (&c->sides[SIDE_BOTTOM],
                 &frame_pix.pm_sides[SIDE_BOTTOM]);
             xfwmWindowShow (&c->sides[SIDE_BOTTOM],
-                screen_info->corners[CORNER_BOTTOM_LEFT][state].width,
+                screen_info->corners[c->qubes_label][CORNER_BOTTOM_LEFT][state].width,
                 frameHeight (c) - frameBottom (c), bottom_width, frameBottom (c),
                 (requires_clearing | width_changed));
 
@@ -1239,7 +1239,7 @@
             {
                 xfwmWindowSetBG (&c->sides[SIDE_TOP], &frame_pix.pm_sides[SIDE_TOP]);
                 xfwmWindowShow (&c->sides[SIDE_TOP],
-                    screen_info->corners[CORNER_TOP_LEFT][state].width,
+                    screen_info->corners[c->qubes_label][CORNER_TOP_LEFT][state].width,
                     0, top_width, frame_pix.pm_sides[SIDE_TOP].height,
                     (requires_clearing | width_changed));
             }
@@ -1250,29 +1250,29 @@
 
             xfwmWindowShow (&c->corners[CORNER_TOP_LEFT], 0, 0,
                 frameTopLeftWidth (c, state),
-                screen_info->corners[CORNER_TOP_LEFT][state].height,
+                screen_info->corners[c->qubes_label][CORNER_TOP_LEFT][state].height,
                 requires_clearing);
 
             xfwmWindowShow (&c->corners[CORNER_TOP_RIGHT],
                 frameWidth (c) - frameTopRightWidth (c, state),
                 0, frameTopRightWidth (c, state),
-                screen_info->corners[CORNER_TOP_RIGHT][state].height,
+                screen_info->corners[c->qubes_label][CORNER_TOP_RIGHT][state].height,
                 requires_clearing);
 
             xfwmWindowShow (&c->corners[CORNER_BOTTOM_LEFT], 0,
                 frameHeight (c) -
-                screen_info->corners[CORNER_BOTTOM_LEFT][state].height,
-                screen_info->corners[CORNER_BOTTOM_LEFT][state].width,
-                screen_info->corners[CORNER_BOTTOM_LEFT][state].height,
+                screen_info->corners[c->qubes_label][CORNER_BOTTOM_LEFT][state].height,
+                screen_info->corners[c->qubes_label][CORNER_BOTTOM_LEFT][state].width,
+                screen_info->corners[c->qubes_label][CORNER_BOTTOM_LEFT][state].height,
                 requires_clearing);
 
             xfwmWindowShow (&c->corners[CORNER_BOTTOM_RIGHT],
                 frameWidth (c) -
-                screen_info->corners[CORNER_BOTTOM_RIGHT][state].width,
+                screen_info->corners[c->qubes_label][CORNER_BOTTOM_RIGHT][state].width,
                 frameHeight (c) -
-                screen_info->corners[CORNER_BOTTOM_RIGHT][state].height,
-                screen_info->corners[CORNER_BOTTOM_RIGHT][state].width,
-                screen_info->corners[CORNER_BOTTOM_RIGHT][state].height,
+                screen_info->corners[c->qubes_label][CORNER_BOTTOM_RIGHT][state].height,
+                screen_info->corners[c->qubes_label][CORNER_BOTTOM_RIGHT][state].width,
+                screen_info->corners[c->qubes_label][CORNER_BOTTOM_RIGHT][state].height,
                 requires_clearing);
         }
         frameSetShape (c, state, &frame_pix, button_x);
diff -ur xfwm4-4.12.3/src/mypixmap.c xfwm4-4.12.3/src/mypixmap.c
--- xfwm4-4.12.3/src/mypixmap.c	2015-05-16 00:25:56.000000000 +1200
+++ xfwm4-4.12.3/src/mypixmap.c	2016-03-12 23:53:08.276000000 +1300
@@ -43,6 +43,7 @@
 #include <gdk/gdk.h>
 #include <gdk/gdkx.h>
 #include <libxfce4util/libxfce4util.h>
+#include <gtk/gtk.h>
 #include <stdlib.h>
 #include <stdio.h>
 
@@ -513,7 +514,7 @@
 
 /* This function does all the work. */
 static GdkPixbuf *
-pixbuf_create_from_xpm (gpointer handle, xfwmColorSymbol *color_sym)
+pixbuf_create_from_xpm (gpointer handle, xfwmColorSymbol *color_sym, gboolean override, gdouble override_h, gdouble override_s, gdouble override_v)
 {
     gchar pixel_str[32];
     const gchar *buffer;
@@ -603,6 +604,18 @@
             color->red = 0;
             color->green = 0;
             color->blue = 0;
+        } else if (override) {
+            gdouble h, s, v, new_r, new_g, new_b;
+            /* override color - for Qubes labels */
+            gtk_rgb_to_hsv(
+                    1.0*color->red/0xFFFF,
+                    1.0*color->green/0xFFFF,
+                    1.0*color->blue/0xFFFF,
+                    &h, &s, &v);
+            gtk_hsv_to_rgb(override_h, override_s, v, &new_r, &new_g, &new_b);
+            color->red = new_r*0xFFFF;
+            color->green = new_g*0xFFFF;
+            color->blue = new_b*0xFFFF;
         }
 
         g_free (color_name);
@@ -674,7 +687,8 @@
 
 
 static GdkPixbuf *
-xpm_image_load (const char *filename, xfwmColorSymbol *color_sym)
+xpm_image_load (const char *filename, xfwmColorSymbol *color_sym,
+        gboolean override, gdouble override_h, gdouble override_s, gdouble override_v)
 {
     guchar buffer[1024];
     GdkPixbuf *pixbuf;
@@ -698,7 +712,8 @@
     fseek (f, 0, SEEK_SET);
     memset (&h, 0, sizeof (h));
     h.infile = f;
-    pixbuf = pixbuf_create_from_xpm (&h, color_sym);
+    pixbuf = pixbuf_create_from_xpm (&h, color_sym, override,
+            override_h, override_s, override_v);
     g_free (h.buffer);
     fclose (f);
 
@@ -933,7 +948,7 @@
 }
 
 gboolean
-xfwmPixmapLoad (ScreenInfo * screen_info, xfwmPixmap * pm, const gchar * dir, const gchar * file, xfwmColorSymbol * cs)
+xfwmPixmapLoad (ScreenInfo * screen_info, xfwmPixmap * pm, const gchar * dir, const gchar * file, xfwmColorSymbol * cs, int qubesLabelId)
 {
     gchar *filename;
     gchar *filexpm;
@@ -954,7 +969,15 @@
     filexpm = g_strdup_printf ("%s.%s", file, "xpm");
     filename = g_build_filename (dir, filexpm, NULL);
     g_free (filexpm);
-    pixbuf = xpm_image_load (filename, cs);
+    if (qubesLabelId >= 0) {
+        pixbuf = xpm_image_load (filename, cs, TRUE,
+                qubes_label_colors[qubesLabelId*3+0],
+                qubes_label_colors[qubesLabelId*3+1],
+                qubes_label_colors[qubesLabelId*3+2]
+                );
+    } else {
+        pixbuf = xpm_image_load (filename, cs, FALSE, 0, 0, 0);
+    }
     g_free (filename);
 
     /* Compose with other image formats, if any available. */
diff -ur xfwm4-4.12.3/src/mypixmap.h xfwm4-4.12.3/src/mypixmap.h
--- xfwm4-4.12.3/src/mypixmap.h	2012-04-10 04:51:18.000000000 +1200
+++ xfwm4-4.12.3/src/mypixmap.h	2016-03-12 23:53:08.276000000 +1300
@@ -61,7 +61,8 @@
                                                                  xfwmPixmap *,
                                                                  const gchar *,
                                                                  const gchar *,
-                                                                 xfwmColorSymbol *);
+                                                                 xfwmColorSymbol *,
+                                                                 int qubesLabelId);
 void                     xfwmPixmapCreate                       (ScreenInfo *,
                                                                  xfwmPixmap *,
                                                                  gint,
diff -ur xfwm4-4.12.3/src/screen.c xfwm4-4.12.3/src/screen.c
--- xfwm4-4.12.3/src/screen.c	2015-05-17 04:41:45.000000000 +1200
+++ xfwm4-4.12.3/src/screen.c	2016-03-12 23:53:08.276000000 +1300
@@ -166,7 +166,7 @@
     GdkWindow *event_win;
     PangoLayout *layout;
     long desktop_visible;
-    int i, j;
+    int i, j, k;
 
     g_return_val_if_fail (display_info, NULL);
     g_return_val_if_fail (GDK_IS_SCREEN (gscr), NULL);
@@ -315,27 +315,35 @@
 
     for (i = 0; i < SIDE_COUNT; i++)
     {
-        xfwmPixmapInit (screen_info, &screen_info->sides[i][ACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->sides[i][INACTIVE]);
+        for (j = 0; j < MAX_QUBES_LABELS; j++) {
+            xfwmPixmapInit (screen_info, &screen_info->sides[j][i][ACTIVE]);
+            xfwmPixmapInit (screen_info, &screen_info->sides[j][i][INACTIVE]);
+        }
     }
     for (i = 0; i < CORNER_COUNT; i++)
     {
-        xfwmPixmapInit (screen_info, &screen_info->corners[i][ACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->corners[i][INACTIVE]);
+        for (j = 0; j < MAX_QUBES_LABELS; j++) {
+            xfwmPixmapInit (screen_info, &screen_info->corners[j][i][ACTIVE]);
+            xfwmPixmapInit (screen_info, &screen_info->corners[j][i][INACTIVE]);
+        }
     }
     for (i = 0; i < BUTTON_COUNT; i++)
     {
         for (j = 0; j < STATE_COUNT; j++)
         {
-            xfwmPixmapInit (screen_info, &screen_info->buttons[i][j]);
+            for (k = 0; k < MAX_QUBES_LABELS; k++) {
+                xfwmPixmapInit (screen_info, &screen_info->buttons[k][i][j]);
+            }
         }
     }
     for (i = 0; i < TITLE_COUNT; i++)
     {
-        xfwmPixmapInit (screen_info, &screen_info->title[i][ACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->title[i][INACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->top[i][ACTIVE]);
-        xfwmPixmapInit (screen_info, &screen_info->top[i][INACTIVE]);
+        for (j = 0; j < MAX_QUBES_LABELS; j++) {
+            xfwmPixmapInit (screen_info, &screen_info->title[j][i][ACTIVE]);
+            xfwmPixmapInit (screen_info, &screen_info->title[j][i][INACTIVE]);
+            xfwmPixmapInit (screen_info, &screen_info->top[j][i][ACTIVE]);
+            xfwmPixmapInit (screen_info, &screen_info->top[j][i][INACTIVE]);
+        }
     }
 
     screen_info->monitors_index = NULL;
diff -ur xfwm4-4.12.3/src/screen.h xfwm4-4.12.3/src/screen.h
--- xfwm4-4.12.3/src/screen.h	2015-05-17 04:41:45.000000000 +1200
+++ xfwm4-4.12.3/src/screen.h	2016-03-12 23:53:08.276000000 +1300
@@ -81,11 +81,12 @@
     /* Theme pixmaps and other params, per screen */
     XfwmColor title_colors[2];
     XfwmColor title_shadow_colors[2];
-    xfwmPixmap buttons[BUTTON_COUNT][STATE_COUNT];
-    xfwmPixmap corners[CORNER_COUNT][2];
-    xfwmPixmap sides[SIDE_COUNT][2];
-    xfwmPixmap title[TITLE_COUNT][2];
-    xfwmPixmap top[TITLE_COUNT][2];
+    XfwmColor qubes_label_colors[MAX_QUBES_LABELS];
+    xfwmPixmap buttons[MAX_QUBES_LABELS][BUTTON_COUNT][STATE_COUNT];
+    xfwmPixmap corners[MAX_QUBES_LABELS][CORNER_COUNT][2];
+    xfwmPixmap sides[MAX_QUBES_LABELS][SIDE_COUNT][2];
+    xfwmPixmap title[MAX_QUBES_LABELS][TITLE_COUNT][2];
+    xfwmPixmap top[MAX_QUBES_LABELS][TITLE_COUNT][2];
 
     /* Per screen graphic contexts */
     GC box_gc;
diff -ur xfwm4-4.12.3/src/settings.c xfwm4-4.12.3/src/settings.c
--- xfwm4-4.12.3/src/settings.c	2015-05-16 00:25:56.000000000 +1200
+++ xfwm4-4.12.3/src/settings.c	2016-03-12 23:53:08.276000000 +1300
@@ -408,7 +408,7 @@
     gchar *theme;
     const gchar *font;
     PangoFontDescription *desc;
-    guint i, j;
+    guint i, j, k;
 
     widget = myScreenGetGtkWidget (screen_info);
     display_info = screen_info->display_info;
@@ -524,41 +524,49 @@
         if (i == SIDE_TOP)
             continue;  /* There is no top decoration per se. */
 
-        g_snprintf(imagename, sizeof (imagename), "%s-active", side_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->sides[i][ACTIVE], theme, imagename, colsym);
+        for (j = 0; j < MAX_QUBES_LABELS; j++) {
+            g_snprintf(imagename, sizeof (imagename), "%s-active", side_names[i]);
+            xfwmPixmapLoad (screen_info, &screen_info->sides[j][i][ACTIVE], theme, imagename, colsym, j);
 
-        g_snprintf(imagename, sizeof (imagename), "%s-inactive", side_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->sides[i][INACTIVE], theme, imagename, colsym);
+            g_snprintf(imagename, sizeof (imagename), "%s-inactive", side_names[i]);
+            xfwmPixmapLoad (screen_info, &screen_info->sides[j][i][INACTIVE], theme, imagename, colsym, j);
+        }
     }
     for (i = 0; i < CORNER_COUNT; i++)
     {
-        g_snprintf(imagename, sizeof (imagename), "%s-active", corner_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->corners[i][ACTIVE], theme, imagename, colsym);
+        for (j = 0; j < MAX_QUBES_LABELS; j++) {
+            g_snprintf(imagename, sizeof (imagename), "%s-active", corner_names[i]);
+            xfwmPixmapLoad (screen_info, &screen_info->corners[j][i][ACTIVE], theme, imagename, colsym, j);
 
-        g_snprintf(imagename, sizeof (imagename), "%s-inactive", corner_names[i]);
-        xfwmPixmapLoad (screen_info, &screen_info->corners[i][INACTIVE], theme, imagename, colsym);
+            g_snprintf(imagename, sizeof (imagename), "%s-inactive", corner_names[i]);
+            xfwmPixmapLoad (screen_info, &screen_info->corners[j][i][INACTIVE], theme, imagename, colsym, j);
+        }
     }
     for (i = 0; i < BUTTON_COUNT; i++)
     {
         for (j = 0; j < STATE_COUNT; j++)
         {
-            g_snprintf(imagename, sizeof (imagename), "%s-%s", button_names[i], button_state_names[j]);
-            xfwmPixmapLoad (screen_info, &screen_info->buttons[i][j], theme, imagename, colsym);
+            for (k = 0; k < MAX_QUBES_LABELS; k++) {
+                g_snprintf(imagename, sizeof (imagename), "%s-%s", button_names[i], button_state_names[j]);
+                xfwmPixmapLoad (screen_info, &screen_info->buttons[k][i][j], theme, imagename, colsym, k);
+            }
         }
     }
     for (i = 0; i < TITLE_COUNT; i++)
     {
-        g_snprintf(imagename, sizeof (imagename), "title-%d-active", i + 1);
-        xfwmPixmapLoad (screen_info, &screen_info->title[i][ACTIVE], theme, imagename, colsym);
+        for (j = 0; j < MAX_QUBES_LABELS; j++) {
+            g_snprintf(imagename, sizeof (imagename), "title-%d-active", i + 1);
+            xfwmPixmapLoad (screen_info, &screen_info->title[j][i][ACTIVE], theme, imagename, colsym, j);
 
-        g_snprintf(imagename, sizeof (imagename), "title-%d-inactive", i + 1);
-        xfwmPixmapLoad (screen_info, &screen_info->title[i][INACTIVE], theme, imagename, colsym);
+            g_snprintf(imagename, sizeof (imagename), "title-%d-inactive", i + 1);
+            xfwmPixmapLoad (screen_info, &screen_info->title[j][i][INACTIVE], theme, imagename, colsym, j);
 
-        g_snprintf(imagename, sizeof (imagename), "top-%d-active", i + 1);
-        xfwmPixmapLoad (screen_info, &screen_info->top[i][ACTIVE], theme, imagename, colsym);
+            g_snprintf(imagename, sizeof (imagename), "top-%d-active", i + 1);
+            xfwmPixmapLoad (screen_info, &screen_info->top[j][i][ACTIVE], theme, imagename, colsym, j);
 
-        g_snprintf(imagename, sizeof (imagename), "top-%d-inactive", i + 1);
-        xfwmPixmapLoad (screen_info, &screen_info->top[i][INACTIVE], theme, imagename, colsym);
+            g_snprintf(imagename, sizeof (imagename), "top-%d-inactive", i + 1);
+            xfwmPixmapLoad (screen_info, &screen_info->top[j][i][INACTIVE], theme, imagename, colsym, j);
+        }
     }
 
     screen_info->box_gc = createGC (screen_info, "#FFFFFF", GXxor, NULL, 2, TRUE);
@@ -947,33 +955,41 @@
 static void
 unloadTheme (ScreenInfo *screen_info)
 {
-    int i, j;
+    int i, j, k;
 
     TRACE ("entering unloadTheme");
 
     for (i = 0; i < SIDE_COUNT; i++)
     {
-        xfwmPixmapFree (&screen_info->sides[i][ACTIVE]);
-        xfwmPixmapFree (&screen_info->sides[i][INACTIVE]);
+        for (j = 0; j < MAX_QUBES_LABELS; j++) {
+            xfwmPixmapFree (&screen_info->sides[j][i][ACTIVE]);
+            xfwmPixmapFree (&screen_info->sides[j][i][INACTIVE]);
+        }
     }
     for (i = 0; i < CORNER_COUNT; i++)
     {
-        xfwmPixmapFree (&screen_info->corners[i][ACTIVE]);
-        xfwmPixmapFree (&screen_info->corners[i][INACTIVE]);
+        for (j = 0; j < MAX_QUBES_LABELS; j++) {
+        xfwmPixmapFree (&screen_info->corners[j][i][ACTIVE]);
+        xfwmPixmapFree (&screen_info->corners[j][i][INACTIVE]);
+        }
     }
     for (i = 0; i < BUTTON_COUNT; i++)
     {
         for (j = 0; j < STATE_COUNT; j++)
         {
-            xfwmPixmapFree (&screen_info->buttons[i][j]);
+            for (k = 0; k < MAX_QUBES_LABELS; k++) {
+                xfwmPixmapFree (&screen_info->buttons[k][i][j]);
+            }
         }
     }
     for (i = 0; i < TITLE_COUNT; i++)
     {
-        xfwmPixmapFree (&screen_info->title[i][ACTIVE]);
-        xfwmPixmapFree (&screen_info->title[i][INACTIVE]);
-        xfwmPixmapFree (&screen_info->top[i][ACTIVE]);
-        xfwmPixmapFree (&screen_info->top[i][INACTIVE]);
+        for (j = 0; j < MAX_QUBES_LABELS; j++) {
+            xfwmPixmapFree (&screen_info->title[j][i][ACTIVE]);
+            xfwmPixmapFree (&screen_info->title[j][i][INACTIVE]);
+            xfwmPixmapFree (&screen_info->top[j][i][ACTIVE]);
+            xfwmPixmapFree (&screen_info->top[j][i][INACTIVE]);
+        }
     }
     if (screen_info->box_gc != None)
     {
diff -ur xfwm4-4.12.3/src/settings.h xfwm4-4.12.3/src/settings.h
--- xfwm4-4.12.3/src/settings.h	2015-05-16 00:25:56.000000000 +1200
+++ xfwm4-4.12.3/src/settings.h	2016-03-12 23:53:08.276000000 +1300
@@ -155,6 +155,33 @@
     PLACE_CENTER
 };
 
+enum
+{
+    QUBES_LABEL_DOM0 = 0,
+    QUBES_LABEL_RED = 1,
+    QUBES_LABEL_ORANGE = 2,
+    QUBES_LABEL_YELLOW = 3,
+    QUBES_LABEL_GREEN = 4,
+    QUBES_LABEL_GRAY = 5,
+    QUBES_LABEL_BLUE = 6,
+    QUBES_LABEL_PURPLE = 7,
+    QUBES_LABEL_BLACK = 8,
+    MAX_QUBES_LABELS = 9
+};
+
+/* HSV values */
+static const gdouble qubes_label_colors[] = {
+    0.0/360.0, 0.0/255.0, 220.0/255.0, /* QUBES_LABEL_DOM0 */
+    0.0/360.0, 200.0/255.0, 220.0/255.0, /* QUBES_LABEL_RED */
+    30.0/360.0, 255.0/255.0, 250.0/250.0, /* QUBES_LABEL_ORANGE */
+    60.0/360.0, 250.0/255.0, 220.0/255.0, /* QUBES_LABEL_YELLOW */
+    120.0/360.0, 250.0/255.0, 200.0/255.0, /* QUBES_LABEL_GREEN */
+    0.0/360.0, 0.0/255.0, 150.0/255.0, /* QUBES_LABEL_GRAY */
+    220.0/360.0, 200.0/255.0, 220.0/255.0, /* QUBES_LABEL_BLUE */
+    300.0/360.0, 255.0/255.0, 99.0/255.0, /* QUBES_LABEL_PURPLE */
+    0.0/360.0, 0.0/255.0, 0.0/255.0  /* QUBES_LABEL_BLACK */
+};
+
 struct _XfwmColor
 {
     GdkColor col;
